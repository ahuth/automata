{"version":3,"sources":["components/Grid.tsx","utils/rule.ts","components/BitSelector.tsx","components/RuleSelector.tsx","utils/row.ts","utils/world.ts","utils/automata.ts","index.ts","components/App.tsx"],"names":["Grid","rows","style","styles","container","map","row","index","key","value","off","on","display","flexDirection","backgroundColor","border","height","width","create","inputs","output","machineReadableInputs","rule","join","humanReadableInputs","BitSelector","toggle","handleChange","useCallback","Rule","input","aria-label","checked","onChange","type","RuleSelector","rules","toggleRule","outputBits","ruleNumber","parseInt","selectors","justifyContent","size","Array","fill","Math","floor","length","next","array","prevIndex","nextIndex","eachNeighborhood","neighbors","find","Row","i","nextRow","push","automata","serializedOutputs","nextRules","World","ReactDOM","render","React","createElement","useState","Automata","setAutomata","serializedInputs","Fragment","document","getElementById"],"mappings":"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","file":"static/js/main.faf85850.chunk.js","sourcesContent":["import React from 'react';\nimport { Type as Row } from '../utils/row';\n\ntype Props = {\n  rows: Row[],\n};\n\nexport default function Grid({ rows }: Props) {\n  return (\n    <div style={styles.container}>\n      {rows.map(function (row, index) {\n        return (\n          <div key={index} style={styles.row}>\n            {row.map(function (value, index) {\n              return <div key={index} style={value === 0 ? styles.off : styles.on} />;\n            })}\n          </div>\n        );\n      })}\n    </div>\n  );\n}\n\nconst styles = {\n  container: {\n    display: 'flex',\n    flexDirection: 'column' as const,\n  },\n  row: {\n    display: 'flex',\n  },\n  on: {\n    backgroundColor: 'black',\n    border: '1px solid black',\n    height: 8,\n    width: 8,\n  },\n  off: {\n    backgroundColor: 'white',\n    border: '1px solid black',\n    height: 8,\n    width: 8,\n  },\n};\n","type Rule = {\n  inputs: number[],\n  output: number,\n};\n\nexport type Type = Rule;\n\nexport function create(inputs: number[], output: number): Rule {\n  return { inputs, output };\n}\n\nexport function machineReadableInputs(rule: Rule): string {\n  return rule.inputs.join('');\n}\n\nexport function humanReadableInputs(rule: Rule): string {\n  return rule.inputs.join();\n}\n\nexport function toggle(rule: Rule): Rule {\n  return {\n    ...rule,\n    output: rule.output === 0 ? 1 : 0,\n  };\n}\n\nexport function find(rules: Rule[], neighbors: number[]): Rule {\n  const matchingRule = rules.find(function (rule) {\n    return machineReadableInputs(rule) === neighbors.join('');\n  });\n\n  return matchingRule || { inputs: [], output: 0 };\n}\n","import React, { useCallback } from 'react';\nimport * as Rule from '../utils/rule';\n\ntype Props = {\n  rule: Rule.Type,\n  toggle: (inputs: string) => void,\n};\n\nexport default function BitSelector({ rule, toggle }: Props) {\n  const { inputs, output } = rule;\n\n  const handleChange = useCallback(function () {\n    toggle(Rule.machineReadableInputs(rule));\n  }, [rule, toggle]);\n\n  return (\n    <div style={styles.container}>\n      <div style={styles.inputs}>\n        {inputs.map(function (input, index) {\n          return <div style={input === 0 ? styles.off : styles.on} key={index} />;\n        })}\n      </div>\n      <input\n        aria-label={Rule.humanReadableInputs(rule)}\n        checked={output === 0 ? false : true}\n        onChange={handleChange}\n        type=\"checkbox\"\n      />\n    </div>\n  );\n}\n\nconst styles = {\n  container: {\n    display: 'flex',\n    flexDirection: 'column' as const,\n  },\n  inputs: {\n    display: 'flex',\n  },\n  on: {\n    backgroundColor: 'black',\n    border: '1px solid black',\n    height: 8,\n    width: 8,\n  },\n  off: {\n    backgroundColor: 'white',\n    border: '1px solid black',\n    height: 8,\n    width: 8,\n  },\n};\n","import React from 'react';\nimport BitSelector from './BitSelector';\nimport * as Rule from '../utils/rule';\n\ntype Props = {\n  rules: Rule.Type[],\n  toggleRule: (inputs: string) => void,\n};\n\nexport default function RuleSelector({ rules, toggleRule }: Props) {\n  const outputBits = rules.map(rule => rule.output);\n  const ruleNumber = parseInt(outputBits.join(''), 2);\n\n  return (\n    <fieldset style={styles.container}>\n      <legend>Automata Rule</legend>\n      <div style={styles.selectors}>\n        {rules.map(function (rule) {\n          return <BitSelector key={Rule.machineReadableInputs(rule)} rule={rule} toggle={toggleRule} />;\n        })}\n      </div>\n      <span>Rule {ruleNumber}</span>\n    </fieldset>\n  );\n}\n\nconst styles = {\n  container: {\n    width: 600,\n  },\n  selectors: {\n    display: 'flex',\n    justifyContent: 'space-between',\n  },\n};\n","import * as Rule from './rule';\n\ntype Row = number[];\n\nexport type Type = Row;\n\nexport function create(size: number): Row {\n  const row = new Array(size).fill(0);\n  const middle = Math.floor(row.length / 2);\n  row[middle] = 1;\n  return row;\n}\n\nexport function next(row: Row, rules: Rule.Type[]): Row {\n  return eachNeighborhood(row).map(function (neighbors) {\n    const rule = Rule.find(rules, neighbors);\n    return rule.output;\n  });\n}\n\nfunction eachNeighborhood(row: Row): number[][] {\n  return row.map(function (value, index, array) {\n    const prevIndex = index - 1;\n    const nextIndex = index + 1;\n\n    const prevValue = prevIndex < 0 ? 0 : array[prevIndex];\n    const nextValue = nextIndex >= array.length ? 0 : array[nextIndex];\n\n    return [prevValue, value, nextValue];\n  });\n}\n","import * as Row from './row';\nimport * as Rule from './rule';\n\ntype World = Row.Type[];\n\nexport type Type = World;\n\nexport function create(height: number, width: number, rules: Rule.Type[]): World {\n  const rows = [Row.create(width)];\n\n  for (let i = 0; i < height; i++) {\n    const lastRow = rows[rows.length - 1];\n    const nextRow = Row.next(lastRow, rules);\n    rows.push(nextRow);\n  }\n\n  return rows;\n}\n","import * as Rule from './rule';\nimport * as World from './world';\n\ntype Automata = {\n  height: number,\n  width: number,\n  rows: World.Type,\n  rules: Rule.Type[],\n};\n\nexport type Type = Automata;\n\nexport function create(height: number, width: number): Automata {\n  const rules = [\n    Rule.create([1, 1, 1], 0),\n    Rule.create([1, 1, 0], 0),\n    Rule.create([1, 0, 1], 0),\n    Rule.create([1, 0, 0], 1),\n    Rule.create([0, 1, 1], 1),\n    Rule.create([0, 1, 0], 1),\n    Rule.create([0, 0, 1], 1),\n    Rule.create([0, 0, 0], 0),\n  ];\n\n  return {\n    height,\n    width,\n    rows: World.create(height, width, rules),\n    rules,\n  };\n}\n\nexport function toggleRule(automata: Automata, serializedOutputs: string): Automata {\n  const nextRules = automata.rules.map(function (rule) {\n    if (Rule.machineReadableInputs(rule) === serializedOutputs) {\n      return Rule.toggle(rule);\n    }\n    return rule;\n  });\n\n  return {\n    ...automata,\n    rows: World.create(automata.height, automata.width, nextRules),\n    rules: nextRules,\n  };\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\nimport './index.css';\n\nReactDOM.render(React.createElement(App), document.getElementById('root'));\n","import React, { useCallback, useState } from 'react';\nimport Grid from './Grid';\nimport RuleSelector from './RuleSelector';\nimport * as Automata from '../utils/automata';\n\nexport default function App() {\n  const [automata, setAutomata] = useState(Automata.create(31, 63));\n\n  const toggleRule = useCallback(function (serializedInputs: string) {\n    setAutomata(\n      Automata.toggleRule(automata, serializedInputs),\n    );\n  }, [automata]);\n\n  return (\n    <React.Fragment>\n      <RuleSelector rules={automata.rules} toggleRule={toggleRule} />\n      <aside>\n        <p>Some of the more interesting rules are: 30, 54, 60, 62, 90, 94, 102, 110, 122, 126, 150, 158, 182, 188, 190, 222</p>\n      </aside>\n      <hr />\n      <Grid rows={automata.rows} />\n    </React.Fragment>\n  );\n}\n"],"sourceRoot":""}