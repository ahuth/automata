{"version":3,"sources":["components/Grid.tsx","automata/rule.ts","components/BitSelector.tsx","components/RuleSelector.tsx","automata/row.ts","automata/world.ts","components/App.tsx","automata/automata.ts","index.ts"],"names":["Grid","rows","style","styles","container","map","row","index","value","off","on","display","flexDirection","backgroundColor","height","width","rule","callback","toNumber","parseInt","_position","output","getBits","join","BitSelector","onToggle","position","inputsString","toString","padStart","Rule","inputs","split","Number","input","aria-label","checked","onChange","type","border","RuleSelector","ruleNumber","selectors","justifyContent","create","size","Array","fill","Math","floor","length","next","array","prevIndex","nextIndex","eachNeighborhood","neighbors","Row","i","nextRow","push","initialAutomata","generations","0","World","Automata","App","useState","automata","setAutomata","Fragment","nextRule","href","ReactDOM","render","React","createElement","document","getElementById"],"mappings":"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","file":"static/js/main.0e7a7c3c.chunk.js","sourcesContent":["import React from 'react';\nimport { Type as Row } from '../automata/row';\n\ntype Props = {\n  rows: Row[],\n};\n\nexport default function Grid({ rows }: Props) {\n  return (\n    <div style={styles.container}>\n      {rows.map(function (row, index) {\n        return (\n          <div key={index} style={styles.row}>\n            {row.map(function (value, index) {\n              return <div key={index} style={value === 0 ? styles.off : styles.on} />;\n            })}\n          </div>\n        );\n      })}\n    </div>\n  );\n}\n\nconst styles = {\n  container: {\n    display: 'flex',\n    flexDirection: 'column' as const,\n  },\n  row: {\n    display: 'flex',\n  },\n  on: {\n    backgroundColor: 'black',\n    height: 8,\n    width: 8,\n  },\n  off: {\n    backgroundColor: 'white',\n    height: 8,\n    width: 8,\n  },\n};\n","export type Bit = 0 | 1;\nexport type Byte = [Bit, Bit, Bit, Bit, Bit, Bit, Bit, Bit];\nexport type Position = 0b111 | 0b110 | 0b101 | 0b100 | 0b011 | 0b010 | 0b001 | 0b000;\n\ntype Rule = {\n  [position in Position]: Bit;\n}\n\nexport type Type = Rule;\n\nexport function create(...bits: Byte): Rule {\n  return {\n    0b111: bits[0],\n    0b110: bits[1],\n    0b101: bits[2],\n    0b100: bits[3],\n    0b011: bits[4],\n    0b010: bits[5],\n    0b001: bits[6],\n    0b000: bits[7],\n  };\n}\n\nexport function getBit(rule: Rule, position: Position): Bit {\n  return rule[position];\n}\n\nexport function getBits(rule: Rule): Byte {\n  // TypeScript can't tell that the array returned by `map` has the 8 values required to\n  // match `Byte`. But we know that it does, which is why there's an `as` type cast.\n  return map(rule, function (_position, output) {\n    return output;\n  }) as Byte;\n}\n\nexport function map<T>(rule: Rule, callback: (position: Position, output: Bit) => T): T[] {\n  return [\n    callback(0b111, rule[0b111]),\n    callback(0b110, rule[0b110]),\n    callback(0b101, rule[0b101]),\n    callback(0b100, rule[0b100]),\n    callback(0b011, rule[0b011]),\n    callback(0b010, rule[0b010]),\n    callback(0b001, rule[0b001]),\n    callback(0b000, rule[0b000]),\n  ];\n}\n\nexport function toggle(rule: Rule, position: Position): Rule {\n  rule[position] = rule[position] === 0 ? 1 : 0;\n  return rule;\n}\n\nexport function toNumber(rule: Rule): number {\n  return parseInt(getBits(rule).join(''), 2);\n}\n\nexport function positionToString(position: Position): string {\n  return position.toString(2).padStart(3, '0');\n}\n\nexport function getPositionFromList(list: [Bit, Bit, Bit]): Position {\n  // TypeScript can't tell that the parsed number is one of the positions. But we know that it is,\n  // which is why there's an `as` type case.\n  return parseInt(list.join(''), 2) as Position;\n}\n","import React from 'react';\nimport * as Rule from '../automata/rule';\n\ntype Props = {\n  onToggle: (position: Rule.Position) => void,\n  output: Rule.Bit;\n  position: Rule.Position;\n};\n\nexport default function BitSelector({ onToggle, output, position }: Props) {\n  const inputsString = Rule.positionToString(position);\n  const inputs = inputsString.split('').map(Number);\n\n  return (\n    <div style={styles.container}>\n      <div style={styles.inputs}>\n        {inputs.map(function (input, index) {\n          return <div style={input === 0 ? styles.off : styles.on} key={index} />;\n        })}\n      </div>\n      <input\n        aria-label={inputsString}\n        checked={output === 0 ? false : true}\n        onChange={() => onToggle(position)}\n        type=\"checkbox\"\n      />\n    </div>\n  );\n}\n\nconst styles = {\n  container: {\n    display: 'flex',\n    flexDirection: 'column' as const,\n  },\n  inputs: {\n    display: 'flex',\n  },\n  on: {\n    backgroundColor: 'black',\n    border: '1px solid black',\n    height: 8,\n    width: 8,\n  },\n  off: {\n    backgroundColor: 'white',\n    border: '1px solid black',\n    height: 8,\n    width: 8,\n  },\n};\n","import React from 'react';\nimport BitSelector from './BitSelector';\nimport * as Rule from '../automata/rule';\n\ntype Props = {\n  rule: Rule.Type,\n  onToggle: (position: Rule.Position) => void,\n};\n\nexport default function RuleSelector({ rule, onToggle }: Props) {\n  const ruleNumber = Rule.toNumber(rule);\n\n  return (\n    <fieldset style={styles.container}>\n      <legend>Automata Rule</legend>\n      <div style={styles.selectors}>\n        {Rule.map(rule, (position, output) => {\n          return <BitSelector key={position} position={position} output={output} onToggle={onToggle} />;\n        })}\n      </div>\n      <span>Rule {ruleNumber}</span>\n    </fieldset>\n  );\n}\n\nconst styles = {\n  container: {\n    width: 600,\n  },\n  selectors: {\n    display: 'flex',\n    justifyContent: 'space-between',\n  },\n};\n","import * as Rule from './rule';\n\ntype Row = Rule.Bit[];\ntype Neighborhood = [Rule.Bit, Rule.Bit, Rule.Bit];\n\nexport type Type = Row;\n\nexport function create(size: number): Row {\n  const row = new Array(size).fill(0);\n  const middle = Math.floor(row.length / 2);\n  row[middle] = 1;\n  return row;\n}\n\nexport function next(row: Row, rule: Rule.Type): Row {\n  return eachNeighborhood(row).map(function (neighbors) {\n    const position = Rule.getPositionFromList(neighbors);\n    return rule[position];\n  });\n}\n\nfunction eachNeighborhood(row: Row): Neighborhood[] {\n  return row.map(function (value, index, array) {\n    const prevIndex = index - 1;\n    const nextIndex = index + 1;\n\n    const prevValue = prevIndex < 0 ? 0 : array[prevIndex];\n    const nextValue = nextIndex >= array.length ? 0 : array[nextIndex];\n\n    return [prevValue, value, nextValue];\n  });\n}\n","import * as Row from './row';\nimport * as Rule from './rule';\n\ntype World = Row.Type[];\n\nexport type Type = World;\n\nexport function create(height: number, width: number, rule: Rule.Type): World {\n  const rows = [Row.create(width)];\n\n  for (let i = 0; i < height; i++) {\n    const lastRow = rows[rows.length - 1];\n    const nextRow = Row.next(lastRow, rule);\n    rows.push(nextRow);\n  }\n\n  return rows;\n}\n","import React, { useState } from 'react';\nimport Grid from './Grid';\nimport RuleSelector from './RuleSelector';\nimport * as Automata from '../automata/automata';\n\nconst initialAutomata = Automata.create(63);\n\nexport default function App() {\n  const [automata, setAutomata] = useState(initialAutomata);\n\n  return (\n    <React.Fragment>\n      <RuleSelector\n        rule={automata.rule}\n        onToggle={(position) => {\n          setAutomata(Automata.toggleRule(automata, position));\n        }}\n      />\n      <aside>\n        <p>Some of the more interesting rules are: 30, 54, 60, 62, 90, 94, 102, 110, 122, 126, 150, 158, 182, 188, 190, 222.</p>\n        <p>View the source code at <a href=\"https://github.com/ahuth/automata\">https://github.com/ahuth/automata</a>.</p>\n      </aside>\n      <hr />\n      <Grid rows={automata.rows} />\n    </React.Fragment>\n  );\n}\n","import * as Rule from './rule';\nimport * as World from './world';\n\ntype Automata = {\n  height: number,\n  width: number,\n  rows: World.Type,\n  rule: Rule.Type,\n};\n\nexport type Type = Automata;\n\nexport function create(generations: number): Automata {\n  const height = generations;\n  const width = height * 2 + 1;\n\n  // Rule 30.\n  const rule = Rule.create(0, 0, 0, 1, 1, 1, 1, 0);\n\n  return {\n    height,\n    width,\n    rows: World.create(height, width, rule),\n    rule,\n  };\n}\n\nexport function toggleRule(automata: Automata, position: Rule.Position): Automata {\n  const nextRule = Rule.toggle(automata.rule, position);\n\n  return {\n    ...automata,\n    rows: World.create(automata.height, automata.width, nextRule),\n    rule: nextRule,\n  };\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\nimport './index.css';\n\nReactDOM.render(React.createElement(App), document.getElementById('root'));\n"],"sourceRoot":""}